image: maven:3-eclipse-temurin-17

variables:
    MAVEN_OPTS: "-Dmaven.repo.local=$CI_PROJECT_DIR/.m2/repository"
    MAVEN_CLI_OPTS: "--batch-mode --errors --fail-at-end --show-version -DinstallAtEnd=true -DdeployAtEnd=true"

cache:
    paths:
        - .m2/repository

production build:
    stage: build
    script:
        - apt-get update -y
        - apt-get install -y ghostscript imagemagick webp
        - if [ -e "../avalanche-warning-maps" ]; then rm -rf ../avalanche-warning-maps; fi
        - git clone --depth 1 https://gitlab.com/albina-euregio/avalanche-warning-maps.git ../avalanche-warning-maps/
        - mvn $MAVEN_CLI_OPTS --activate-profiles env-prod install
    artifacts:
        when: always
        paths:
            - target/albina.war
        reports:
            junit:
                - target/surefire-reports/TEST-*.xml
                - target/failsafe-reports/TEST-*.xml

deploy to development:
    stage: deploy
    script:
        - export TOMCAT_PATH=/albina_dev
        - export GIT_VERSION=$(git describe --tags)
        - mvn $MAVEN_CLI_OPTS --activate-profiles env-dev tomcat7:deploy -Dmaven.test.skip=true
    environment:
        name: development
    only:
        - master
        - ci

deploy to production:
    stage: deploy
    script:
        - export TOMCAT_PATH=/albina
        - export GIT_VERSION=$(git describe --tags)
        - mvn $MAVEN_CLI_OPTS --activate-profiles env-prod tomcat7:deploy -Dmaven.test.skip=true
    environment:
        name: production
    only:
        - tags
    when: manual

container_build:
    stage: build
    needs:
        - job: 'production build'
          artifacts: false
    variables:
        GIT_VERSION: ${CI_COMMIT_SHORT_SHA}
    script:
        - mvn $MAVEN_CLI_OPTS -Dalbina.conf.git.version=${GIT_VERSION} -Dhibernate.connection.password=changeit -Dmaven.test.skip=true clean verify
    artifacts:
        when: always
        paths:
            - target/albina.war
        expire_in: 2h
    rules:
        - if: '$CI_COMMIT_BRANCH'

containerize:
    image:
        name: gcr.io/kaniko-project/executor:debug
        entrypoint: [""]
    stage: build
    cache: {}
    needs:
        - job: container_build
          artifacts: true
    script:
        - echo "{\"auths\":{\"${CI_REGISTRY}\":{\"username\":\"${CI_REGISTRY_USER}\",\"password\":\"${CI_REGISTRY_PASSWORD}\"}}}" > /kaniko/.docker/config.json
        - /kaniko/executor --context ${CI_PROJECT_DIR} --dockerfile ${CI_PROJECT_DIR}/Dockerfile --destination ${CI_REGISTRY_IMAGE}:${CI_COMMIT_REF_NAME} --destination ${CI_REGISTRY_IMAGE}:${CI_COMMIT_REF_NAME}-${CI_COMMIT_SHORT_SHA} --insecure-registry=${CI_REGISTRY} --insecure
    rules:
        - if: '$CI_COMMIT_BRANCH'
