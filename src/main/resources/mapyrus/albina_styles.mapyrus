
# -------------------------------------------------------------
# Zoomstufe & Zoomfaktor
# -------------------------------------------------------------
let level = level
let pf = 1

if map_level eq "thumbnail" then
	let zf = 1.0 * pf
elif map_level eq "standard" then
	let zf = 1.0 * pf
elif map_level eq "overlay" then
	let zf = 1.0 * pf
endif

# -------------------------------------------------------------
# --- Schummerung
# -------------------------------------------------------------
let draw_raster = "true"												# Schummerung true/false

# -------------------------------------------------------------
# --- Lawinengefahrenstufen Regionen
# -------------------------------------------------------------

# Farben der Gefahrenstufen (Icon Style)
/*
let danger_color[0] = "color '#FFFFFF'"									# weiß
let danger_color[1] = "color '#CAD65A'"									# grün
let danger_color[2] = "color '#FFFF00'"									# gelb
let danger_color[3] = "color '#F39A1B'"									# orange
let danger_color[4] = "color '#E52D22'"									# rot
let danger_color[5] = "color '#666666'"									# dunkelgrau
*/

# Farben der Gefahrenstufen (Transporter Style)
#/*
let danger_color[0] = "color '#FFFFFF'"									# weiß
let danger_color[1] = "color '#CCFF66'"									# grün
let danger_color[2] = "color '#FFFF00'"									# gelb
let danger_color[3] = "color '#FF9900'"									# orange
let danger_color[4] = "color '#FF0000'"									# rot
let danger_color[5] = "color '#666666'"									# dunkelgrau
if map_level eq "thumbnail" or bulletin_id eq "overlay" then
	let danger_color[5] = "color '#660000'"
endif

#*/

# Farben der Gefahrenstufen (knalliger Style)
/*
let danger_color[0] = "color '#FFFFFF'"									# weiß
let danger_color[1] = "color '#00FF00'"									# grün
let danger_color[2] = "color '#FFFF00'"									# gelb
let danger_color[3] = "color '#FF9900'"									# orange
let danger_color[4] = "color '#FF0000'"									# rot
let danger_color[5] = "color '#666666'"									# dunkelgrau
*/

# Farben der Gefahrenstufen (LWD-Tirol Style)
/*
let danger_color[0] = "color '#FFFFFF'"									# weiß
let danger_color[1] = "color '#00FF00'"									# grün
let danger_color[2] = "color '#FFFF00'"									# gelb
let danger_color[3] = "color '#FF9900'"									# orange
let danger_color[4] = "color '#FF0000'"									# rot
let danger_color[5] = "color '#000000'"									# schwarz
*/

let dynamic_region_color = "color '#cda5ce'"	# nicht verwendet
let rest_color = "color '#DDDDDD'"				# Farbe nicht betroffener Regionen bei Bulletin maps
let rest_stroke = "linestyle " . 0.1

# Farben der Gefahrenstufen (Schwarz-Weiß Darstellung)
if colormode eq "bw" then
	let danger_color[0] = "color '#FFFFFF'"									# weiß
	let danger_color[1] = "color '#EFEFEF'"									# grün
	let danger_color[2] = "color '#D8D8D8'"									# gelb
	let danger_color[3] = "color '#B0B0B0'"									# orange
	let danger_color[4] = "color '#888888'"									# rot
	let danger_color[5] = "color '#666666'"									# dunkelgrau
	if map_level eq "thumbnail" or bulletin_id eq "overlay" then
		let danger_color[5] = "color '#454545'"
	endif
	let rest_color = "color '#999999'"
endif


# Regionslinie
let reg_line_color = "color '#FFFFFF'"
let reg_line = "linestyle " . 0.3  * zf . ", 'round', 'round'"
let reg_line_1 = "linestyle " . 0.075  * zf . ", 'round', 'round'"
let reg_line_2 = "linestyle " . 0.1  * zf . ", 'round', 'round'"
let reg_line_3 = "linestyle " . 0.15  * zf . ", 'round', 'round'"

# Staatsgrenze
let country_line_color = "color '#777777'"
let country_line_1 = "linestyle " . 0.2  * zf . ", 'round', 'round'"
let country_line_2 = "linestyle " . 0.3  * zf . ", 'round', 'round'"
let country_line_3 = "linestyle " . 0.4  * zf . ", 'round', 'round'"

# Provinzgrenze
let prov_line_color = "color '#777777'"
let prov_line_1 = "linestyle " . 0.1  * zf . ", 'round', 'round'"
let prov_line_2 = "linestyle " . 0.15  * zf . ", 'round', 'round'"
let prov_line_3 = "linestyle " . 0.2  * zf . ", 'round', 'round'"

let autonom_line_1 = "linestyle " . 0.05  * zf . ", 'round', 'round'"
let autonom_line_2 = "linestyle " . 0.075  * zf . ", 'round', 'round'"
let autonom_line_3 = "linestyle " . 0.2  * zf . ", 'round', 'round'"

# Absoftbereich
let pp_color = "color '#FFFFFF', 0.5"

# Flüsse
let river_line_color = "color '#19ABFF'"			#488cca
let river_line_1 = "linestyle " . 0.125  * zf . ", 'round', 'round'"
let river_line_2 = "linestyle " . 0.15  * zf . ", 'round', 'round'"
let river_line_3 = "linestyle " . 0.2  * zf . ", 'round', 'round'"

# Seen
let lake_color = "color '#99DAFF'"		#d8f0fc
let lake_line_color = river_line_color
let lake_line = "linestyle " . 0.1  * zf . ", 'round', 'round'"

# Städtemarke
let marker_scale = 0.5 * zf
let marker_color = "color '#FFFFFF'"
let marker_line_color = "color '#222222'"
if map_level eq "thumbnail" then
	let marker_line_color = "color '#444444'"
endif
let marker_line = "linestyle " . 0.25  * zf . ", 'round', 'round'"

# Städtenamen
let city_label_color = "color '#222222'"
let cap_city_font_size = 2.2 * zf
let city_font_size = 1.9 * zf
if map_level eq "thumbnail" then
	let label_halo_background_color = "color '#FFFFFF'"
	let label_halo_width = "outlinewidth=" . 0.0 * zf
	let label_halo_width5 = "outlinewidth=" . 0.325 * zf
else
	let label_halo_background_color = "color '#FFFFFF'"
	let label_halo_width = "outlinewidth=" . 0.0 * zf
	let label_halo_width5 = "outlinewidth=" . 0.325 * zf
endif

# Gipfelmarker
let peak_scale = 0.5 * zf
let peak_color = "color '#FFFFFF'"
let peak_line_color = "color '#222222'"
let peak_line = "linestyle " . 0.25  * zf . ", 'round', 'round'"

# Gipfelnamen
let peak_label_color = "color '#222222'"
let peak_font_size = 1.6 * zf

# Weitere Labelvariablen
let country_label_color = "color '#777777'"
let country_font_size = 1.9 * zf
let prov_label_color = "color '#222222'"
let prov_font_size = 2.0 * zf
let range_label_color = "color '#000000'"
let range_font_size = 2.5 * zf
let label_halo_color = "color '#333333'"
let no_label_halo = "outlinewidth=" . 0.0 * zf

# Rahmenbreite
if map_level eq "thumbnail" then
	let frame_width = 0.1
elif map_level eq "standard" then
	let frame_width = 0.15
elif map_level eq "overlay" then
	let frame_width = 0.2
endif

let frame_stroke_color = "color '#999999'"										# Rahmenfarbe #1aabff
let frame_line_style = "linestyle " . frame_width . ", 'round', 'miter'" 		# Rahmenbreite


# Maßstabsvariablen
let scale_km_value = 20
let scale_bar_color = "color '#222222'"
let scale_bar_style = "linestyle " . frame_width . ", 'butt', 'round'"
let scale_font = font_semibold

# Fontsize Maßstab und Copyright
if map_level eq "thumbnail" then
	let c_fontsize = 0.8
	let scale_fontsize = 0.8
elif map_level eq "standard" then
	let c_fontsize = 1.8
	let scale_fontsize = 2.0
elif map_level eq "overlay" then
	let c_fontsize = 1.8
	let scale_fontsize = 2.2
endif

# Copyrightvariabel
let copyright_txt = "(CC)BY avalanche.report"
let c_font = font_semibold
let c_fontcolor = "color '#444444'"
