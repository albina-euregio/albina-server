
# -------------------------------------------------------------
# Zoom level & zoom factor
# -------------------------------------------------------------
let level = level
let pf = 1

if map_level eq "thumbnail" then
	let zf = 1.0 * pf
elif map_level eq "standard" then
	let zf = 1.0 * pf
elif map_level eq "overlay" then
	let zf = 1.0 * pf
endif

# -------------------------------------------------------------
# --- Shading
# -------------------------------------------------------------
let draw_raster = "true"												# Shading true/false

# -------------------------------------------------------------
# --- Danger level regions
# -------------------------------------------------------------

# Danger level colors (Icon Style)
/*
let danger_color[0] = "color '#FFFFFF'"									# white
let danger_color[1] = "color '#CAD65A'"									# green
let danger_color[2] = "color '#FFFF00'"									# yellow
let danger_color[3] = "color '#F39A1B'"									# orange
let danger_color[4] = "color '#E52D22'"									# red
let danger_color[5] = "color '#666666'"									# dark grey
*/

# Danger level colors (Transporter Style)
let danger_color[0] = "color '#FFFFFF'"									# white
let danger_color[1] = "color '#CCFF66'"									# green
let danger_color[2] = "color '#FFFF00'"									# yellow
let danger_color[3] = "color '#FF9900'"									# orange
let danger_color[4] = "color '#FF0000'"									# red
let danger_color[5] = "color '#666666'"									# dark grey
if map_level eq "thumbnail" or bulletin_id eq "overlay" then
	let danger_color[5] = "color '#660000'"
endif

# Danger level colors (knalliger Style)
/*
let danger_color[0] = "color '#FFFFFF'"									# white
let danger_color[1] = "color '#00FF00'"									# green
let danger_color[2] = "color '#FFFF00'"									# yellow
let danger_color[3] = "color '#FF9900'"									# orange
let danger_color[4] = "color '#FF0000'"									# red
let danger_color[5] = "color '#666666'"									# dark grey
*/

# Danger level colors (LWD-Tirol Style)
/*
let danger_color[0] = "color '#FFFFFF'"									# white
let danger_color[1] = "color '#00FF00'"									# green
let danger_color[2] = "color '#FFFF00'"									# yellow
let danger_color[3] = "color '#FF9900'"									# orange
let danger_color[4] = "color '#FF0000'"									# red
let danger_color[5] = "color '#000000'"									# schwarz
*/

let dynamic_region_color = "color '#cda5ce'"							# not used
let rest_color = "color '#DDDDDD'"										# Color of regions not rated
let rest_stroke = "linestyle " . 0.1

# Danger level colors (black & white)
if colormode eq "bw" then
	let danger_color[0] = "color '#FFFFFF'"								# white
	let danger_color[1] = "color '#EFEFEF'"								# green
	let danger_color[2] = "color '#D8D8D8'"								# yellow
	let danger_color[3] = "color '#B0B0B0'"								# orange
	let danger_color[4] = "color '#888888'"								# red
	let danger_color[5] = "color '#666666'"								# dark grey
	if map_level eq "thumbnail" or bulletin_id eq "overlay" then
		let danger_color[5] = "color '#454545'"
	endif
	let rest_color = "color '#999999'"
endif


# Region lines
let reg_line_color = "color '#FFFFFF'"
let reg_line = "linestyle " . 0.3  * zf . ", 'round', 'round'"
let reg_line_1 = "linestyle " . 0.075  * zf . ", 'round', 'round'"
let reg_line_2 = "linestyle " . 0.1  * zf . ", 'round', 'round'"
let reg_line_3 = "linestyle " . 0.15  * zf . ", 'round', 'round'"

# Country borders
let country_line_color = "color '#777777'"
let country_line_1 = "linestyle " . 0.2  * zf . ", 'round', 'round'"
let country_line_2 = "linestyle " . 0.3  * zf . ", 'round', 'round'"
let country_line_3 = "linestyle " . 0.4  * zf . ", 'round', 'round'"

# Province borders
let prov_line_color = "color '#777777'"
let prov_line_1 = "linestyle " . 0.1  * zf . ", 'round', 'round'"
let prov_line_2 = "linestyle " . 0.15  * zf . ", 'round', 'round'"
let prov_line_3 = "linestyle " . 0.2  * zf . ", 'round', 'round'"

let autonom_line_1 = "linestyle " . 0.05  * zf . ", 'round', 'round'"
let autonom_line_2 = "linestyle " . 0.075  * zf . ", 'round', 'round'"
let autonom_line_3 = "linestyle " . 0.2  * zf . ", 'round', 'round'"

# Absoft area
let pp_color = "color '#FFFFFF', 0.5"

# Rivers
let river_line_color = "color '#19ABFF'"			#488cca
let river_line_1 = "linestyle " . 0.125  * zf . ", 'round', 'round'"
let river_line_2 = "linestyle " . 0.15  * zf . ", 'round', 'round'"
let river_line_3 = "linestyle " . 0.2  * zf . ", 'round', 'round'"

# Lakes
let lake_color = "color '#99DAFF'"		#d8f0fc
let lake_line_color = river_line_color
let lake_line = "linestyle " . 0.1  * zf . ", 'round', 'round'"

# City markers
let marker_scale = 0.5 * zf
let marker_color = "color '#FFFFFF'"
let marker_line_color = "color '#222222'"
if map_level eq "thumbnail" then
	let marker_line_color = "color '#444444'"
endif
let marker_line = "linestyle " . 0.25  * zf . ", 'round', 'round'"

# City labels
let city_label_color = "color '#222222'"
let cap_city_font_size = 2.2 * zf
let city_font_size = 1.9 * zf
if map_level eq "thumbnail" then
	let label_halo_background_color = "color '#FFFFFF'"
	let label_halo_width = "outlinewidth=" . 0.0 * zf
	let label_halo_width5 = "outlinewidth=" . 0.325 * zf
else
	let label_halo_background_color = "color '#FFFFFF'"
	let label_halo_width = "outlinewidth=" . 0.0 * zf
	let label_halo_width5 = "outlinewidth=" . 0.325 * zf
endif

# Peak markers
let peak_scale = 0.5 * zf
let peak_color = "color '#FFFFFF'"
let peak_line_color = "color '#222222'"
let peak_line = "linestyle " . 0.25  * zf . ", 'round', 'round'"

# Peak names
let peak_label_color = "color '#222222'"
let peak_font_size = 1.6 * zf

# Additional label variables
let country_label_color = "color '#777777'"
let country_font_size = 1.9 * zf
let prov_label_color = "color '#222222'"
let prov_font_size = 2.0 * zf
let range_label_color = "color '#000000'"
let range_font_size = 2.5 * zf
let label_halo_color = "color '#333333'"
let no_label_halo = "outlinewidth=" . 0.0 * zf

# Frame width
if map_level eq "thumbnail" then
	let frame_width = 0.1
elif map_level eq "standard" then
	let frame_width = 0.15
elif map_level eq "overlay" then
	let frame_width = 0.2
endif

let frame_stroke_color = "color '#999999'"
let frame_line_style = "linestyle " . frame_width . ", 'round', 'miter'"

# Scale bar variables
let scale_km_value = 20
let scale_bar_color = "color '#222222'"
let scale_bar_style = "linestyle " . frame_width . ", 'butt', 'round'"
let scale_font = font_semibold

# Font size, scale and copyright
if map_level eq "thumbnail" then
	let c_fontsize = 0.8
	let scale_fontsize = 0.8
elif map_level eq "standard" then
	let c_fontsize = 1.8
	let scale_fontsize = 2.0
elif map_level eq "overlay" then
	let c_fontsize = 1.8
	let scale_fontsize = 2.2
endif

# Logo Size
let logo_size = 52

# Copyright variables
let copyright_txt = "(CC)BY avalanche.report"
let c_font = font_semibold
let c_fontcolor = "color '#444444'"
